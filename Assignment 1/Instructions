Assignment 1: Chat server and Analysis - Discordn’t

Part 1

Create a Discord/Slack/etc chat clone. These chat programs are different than classic chats (such as IRC or similar) in that the messages are maintained for the client, storing messages on the server while the client is offline.

Create a stateful chat server and a thin chat client that works with your server (which may be telnet with lots of documentation!).
Your server should maintain chat messages between restarts. You may use a “flat file” (text file), or sqlite if you wish.
Your thin client should store no state between restarts, and minimal state while running.
Use TCP to communicate between your components. Your server must handle multiple clients by using select (or similar tool in your language of choice)
Design a simple protocol for your application. Do not use HTTP.
When a client connects, the client should show up to the last few (20-100) messages that the have been shared of the server.

Bonus +5%

Add per-client “unread” lists. Deliver just these messages to a user when they connect. Or, some other way to show this client missed these messages while offline.

Part 2 Analysis

How many messages per second can your chat server collect amd share? Does the number of clients change the performance of your server (and therefore overall application)?

Experimental setup:

1 server, that is on a different machine than the clients
You may create a “test” client that sends messages as fast as possible. This can be based on your client from part 1, or can be a different/separate client. You may also have a modified version of your server that collects statistics. Pro strategy, quitting when given a “quit” message from the server.
All clients should be attempting to send messages as fast as possible while also listening for messages.
Create a minimum of 7 data points each with a different number of clients, starting with 1 client, and with a maximum of 200. (1,2,5,10,20,50,100,200 is a nice set of clients) More, if you can!
For each test run, run for at least 5 minutes, and create an average based on number of messages sent/time running
Submit a Markdown file with a written analysis explaining your results in markdown, and an image of your boxplots. Include your test scripts.

Create a markdown file with a discussion of your finding in markdown, linking your images where appropriate. Discuss:

Did running more clients affect the performance of your server?
Anecdotally (that is, without doing the math) would you say the performance degrades linearly, quadradically, factorially? Why?
Notes:

Consider looking into Bash scripting or use subprocess in Python). Create a boxplot chart that will compare the two distributions. Excel can make boxplots, or use an analytical suite like R or Python with Pandas.

Hand in

All of your code
a readme in markdown that details
how to start your server
how to start your client
anything it takes to make the application go. It is not our responsibility to figure out how to use your application, and will deduct marks up to 100% if we can not get your assignment to work due to bad documentation.
a note about the bonus mark, if you attempted it.z
A markdown file that has your discussion for part 2.
Using handin: assuming you have a folder named my_assignment_1_folder. Go to its parent folder (so you can see my_assignment_1_folder in ls) and run handin 3010 a1 my_assignment_1_folder
