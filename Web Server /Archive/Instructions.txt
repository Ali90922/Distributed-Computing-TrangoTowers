Assignment 2: Multi-threaded API web server

Remember to complete the Honesty Declaration in UMLearn
As a reminder, copying material (text or code) is plagiarism and academic dishonesty (see the Science links in the ROASS page for details on what constitutes academic dishonesty in written/research work).
You must use socket libraries directly to do this assignment. Open a socket, listen to it, reply accordingly. No higher-level libraries are permitted.

You may write this in any language you choose, but the code must compile (if relevant) and run on the aviary machines.

Part 1 API Web server and site - Chat web client

Create a multi-threaded web server that serves dynamic content. Specifically a website that uses Javascript to populate and post to “Discordn’t”.

Your frontend is a “Single page application” that should not refresh. All requests for data, login, and creation of new posts must be done using Javascript’s XMLHttpRequest tool. Your page should not refresh at any point Hint: don’t use “on submit” features on forms - they refresh the page (or fetch a new page).

The database is… assignment 1! Use a socket to connect from your WWW server to the chat chat server to add new messages, and get new messages from the server.

Login is done by simply using a name (no authentication, anyone can post as anyone). On return to the site, the user should stay logged in as that user.

There are two types of paths your server must host:

Path that is / you should serve your “index” page that has the HTML skeleton and Javascript code that populates the content. This page is static content.
Paths that are prefixes with /api/ are API calls that run code.
If the path is not /api, it should check the file system for files to share (images, html files, javascript).
If the file path (/) or API paths do not exist, or have problems, appropriate error messages should be returned.
Your application should not crash, and always provide a response, even if it is an error code.

The client has to be able to get new messages from the server. We will use polling for this. There is an example of how to do this in this folder.

We will test your site on Google Chrome.

Suggested API paths

GET /api/messages - get a list of all messages (optional, depending on how you write your program)
GET /api/messages?last=xxxxxx - get a list of all messages after this value. The sample solution uses a UNIX time, you can use an ID, or anything else to limit the number of messages returned.
POST /api/messages - create a new message on the server. This message will have a body that is json.
POST /api/login - Log into the system, return a 200, and sets cookies (no persistent storage on the server)
DELETE /api/login - Log out of the system (which does nothing for the server, but has a meaningful reply)
Only users that are logged in (with cookies) should be able to do anything with messages (view, post). Cookies should be set to httponly.

Permitted libraries

These are the libraries I used to complete the assignment. If you want to use a library that is not on this list, ask in the discussion forum.

import socket
import select
import argparse
import sys
import os
import re        # good for matching things!
import uuid      # unique ID stuff
import json
import tempfile  # unique ID stuff
import time      # for timeouts
import pytz      # not really needed!
import random    # unique ID stuff (but a bad one), or load balancing
import traceback # helpful for debugging! Though you should probably pull this out before you submit
import threading
Bonus +5%

Implement the route

DELETE /api/messages/[message-id] - Delete message message-id
Your cookies must be set to secure. This forces the cookie to be deleted via a set-cookie header.

You should only be able to delete messages that you own (have the same user name as…)

There should be buttons on the frontend to complete these tasks, and the frontend should update/react appropriately. These also must be done with XHR (no page refreshes allowed here either!).

No part marks! Make a note in your readme if you have completed these tasks.

Part 2 System test in C

Write a screen scraper for the chat system you wrote for Part 1.

Your screen scraper should accept a command-line argument to indicate who you are (use this for your cookie value) and what you would like to write as a chat. For instance:

# Run with [host] [port] [username] [then the chat]
./a2 goose.cs.umanitoba.ca 4001 Roblo Can you hear me now
Your screen scraper must be in C. Use an assert statement to verify the chat message was accepted properly, by requesting the message list link a second time with a GET query, and checking the results of the api server. So, you will have a POST to add the chat, and a GET to verify it is there with the given text.

Also test GET or POST made without a cookie/authentication are not permitted with appropriate error message.

You must use sockets manually (as seen in class) to fetch data from the web server. You may use the example from class as a starting point.

You must have a makefile to build your program. Do not submit any binaries.

Handin

Hand in your code, with an associated readme.md. Explain how to run your code - possibly including port numbers we should expect, and highlight any oddities in your progress.

Using handin: assuming you have a folder named my_assignment_2_folder. Go to its parent folder (so you can see my_assignment_2_folder in ls) and run handin 3010 a2 my_assignment_2_folder
